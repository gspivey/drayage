// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comms.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	comms.proto

It has these top-level messages:
	Volume
	Status
	DockerVolume
	VolumeAndHost
	Files
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Volume struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Status struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DockerVolume struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size    string `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
	Updated string `protobuf:"bytes,3,opt,name=updated" json:"updated,omitempty"`
}

func (m *DockerVolume) Reset()                    { *m = DockerVolume{} }
func (m *DockerVolume) String() string            { return proto.CompactTextString(m) }
func (*DockerVolume) ProtoMessage()               {}
func (*DockerVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DockerVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerVolume) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *DockerVolume) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

type VolumeAndHost struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostFQDM string `protobuf:"bytes,2,opt,name=hostFQDM" json:"hostFQDM,omitempty"`
}

func (m *VolumeAndHost) Reset()                    { *m = VolumeAndHost{} }
func (m *VolumeAndHost) String() string            { return proto.CompactTextString(m) }
func (*VolumeAndHost) ProtoMessage()               {}
func (*VolumeAndHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VolumeAndHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeAndHost) GetHostFQDM() string {
	if m != nil {
		return m.HostFQDM
	}
	return ""
}

type Files struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Files) Reset()                    { *m = Files{} }
func (m *Files) String() string            { return proto.CompactTextString(m) }
func (*Files) ProtoMessage()               {}
func (*Files) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Files) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*Volume)(nil), "protocol.Volume")
	proto.RegisterType((*Status)(nil), "protocol.Status")
	proto.RegisterType((*DockerVolume)(nil), "protocol.DockerVolume")
	proto.RegisterType((*VolumeAndHost)(nil), "protocol.VolumeAndHost")
	proto.RegisterType((*Files)(nil), "protocol.Files")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommsProto service

type CommsProtoClient interface {
	RMVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Status, error)
	LSVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (CommsProto_LSVolumeClient, error)
	AddVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Status, error)
	GetVolume(ctx context.Context, in *VolumeAndHost, opts ...grpc.CallOption) (*Status, error)
	VolumeFiles(ctx context.Context, in *Volume, opts ...grpc.CallOption) (CommsProto_VolumeFilesClient, error)
}

type commsProtoClient struct {
	cc *grpc.ClientConn
}

func NewCommsProtoClient(cc *grpc.ClientConn) CommsProtoClient {
	return &commsProtoClient{cc}
}

func (c *commsProtoClient) RMVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/protocol.CommsProto/RMVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commsProtoClient) LSVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (CommsProto_LSVolumeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CommsProto_serviceDesc.Streams[0], c.cc, "/protocol.CommsProto/LSVolume", opts...)
	if err != nil {
		return nil, err
	}
	x := &commsProtoLSVolumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommsProto_LSVolumeClient interface {
	Recv() (*DockerVolume, error)
	grpc.ClientStream
}

type commsProtoLSVolumeClient struct {
	grpc.ClientStream
}

func (x *commsProtoLSVolumeClient) Recv() (*DockerVolume, error) {
	m := new(DockerVolume)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commsProtoClient) AddVolume(ctx context.Context, in *Volume, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/protocol.CommsProto/AddVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commsProtoClient) GetVolume(ctx context.Context, in *VolumeAndHost, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/protocol.CommsProto/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commsProtoClient) VolumeFiles(ctx context.Context, in *Volume, opts ...grpc.CallOption) (CommsProto_VolumeFilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CommsProto_serviceDesc.Streams[1], c.cc, "/protocol.CommsProto/VolumeFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &commsProtoVolumeFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommsProto_VolumeFilesClient interface {
	Recv() (*Files, error)
	grpc.ClientStream
}

type commsProtoVolumeFilesClient struct {
	grpc.ClientStream
}

func (x *commsProtoVolumeFilesClient) Recv() (*Files, error) {
	m := new(Files)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CommsProto service

type CommsProtoServer interface {
	RMVolume(context.Context, *Volume) (*Status, error)
	LSVolume(*Volume, CommsProto_LSVolumeServer) error
	AddVolume(context.Context, *Volume) (*Status, error)
	GetVolume(context.Context, *VolumeAndHost) (*Status, error)
	VolumeFiles(*Volume, CommsProto_VolumeFilesServer) error
}

func RegisterCommsProtoServer(s *grpc.Server, srv CommsProtoServer) {
	s.RegisterService(&_CommsProto_serviceDesc, srv)
}

func _CommsProto_RMVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Volume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommsProtoServer).RMVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CommsProto/RMVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommsProtoServer).RMVolume(ctx, req.(*Volume))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommsProto_LSVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Volume)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommsProtoServer).LSVolume(m, &commsProtoLSVolumeServer{stream})
}

type CommsProto_LSVolumeServer interface {
	Send(*DockerVolume) error
	grpc.ServerStream
}

type commsProtoLSVolumeServer struct {
	grpc.ServerStream
}

func (x *commsProtoLSVolumeServer) Send(m *DockerVolume) error {
	return x.ServerStream.SendMsg(m)
}

func _CommsProto_AddVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Volume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommsProtoServer).AddVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CommsProto/AddVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommsProtoServer).AddVolume(ctx, req.(*Volume))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommsProto_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeAndHost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommsProtoServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.CommsProto/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommsProtoServer).GetVolume(ctx, req.(*VolumeAndHost))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommsProto_VolumeFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Volume)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommsProtoServer).VolumeFiles(m, &commsProtoVolumeFilesServer{stream})
}

type CommsProto_VolumeFilesServer interface {
	Send(*Files) error
	grpc.ServerStream
}

type commsProtoVolumeFilesServer struct {
	grpc.ServerStream
}

func (x *commsProtoVolumeFilesServer) Send(m *Files) error {
	return x.ServerStream.SendMsg(m)
}

var _CommsProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.CommsProto",
	HandlerType: (*CommsProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RMVolume",
			Handler:    _CommsProto_RMVolume_Handler,
		},
		{
			MethodName: "AddVolume",
			Handler:    _CommsProto_AddVolume_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _CommsProto_GetVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LSVolume",
			Handler:       _CommsProto_LSVolume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeFiles",
			Handler:       _CommsProto_VolumeFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comms.proto",
}

func init() { proto.RegisterFile("comms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4f, 0xc2, 0x40,
	0x14, 0xc4, 0x29, 0x6a, 0x6d, 0x07, 0x8d, 0x66, 0x0f, 0xd8, 0xa0, 0x07, 0xb2, 0x27, 0x4f, 0x0d,
	0xfe, 0x39, 0x78, 0x33, 0x44, 0x82, 0x1e, 0x24, 0x41, 0x48, 0xbc, 0xd7, 0xee, 0x26, 0x10, 0xbb,
	0x6c, 0xc3, 0x6e, 0x2f, 0x7e, 0x15, 0xbf, 0xac, 0xd9, 0x3f, 0x15, 0xa2, 0xf4, 0xc0, 0xa9, 0xf3,
	0x7e, 0xdd, 0x99, 0xf7, 0x32, 0xe8, 0xe4, 0x52, 0x08, 0x95, 0x96, 0x6b, 0xa9, 0x25, 0x89, 0xec,
	0x27, 0x97, 0x05, 0xbd, 0x42, 0xf8, 0x2e, 0x8b, 0x4a, 0x70, 0x42, 0x70, 0xb8, 0xca, 0x04, 0x4f,
	0x82, 0x7e, 0x70, 0x1d, 0xcf, 0xac, 0xa6, 0x7d, 0x84, 0x73, 0x9d, 0xe9, 0x4a, 0x91, 0x2e, 0x42,
	0x65, 0x95, 0xff, 0xef, 0x27, 0x3a, 0xc5, 0xc9, 0x48, 0xe6, 0x9f, 0x7c, 0xdd, 0x9c, 0x62, 0x98,
	0x5a, 0x7e, 0xf1, 0xa4, 0xed, 0x98, 0xd1, 0x24, 0xc1, 0x71, 0x55, 0xb2, 0x4c, 0x73, 0x96, 0x1c,
	0x58, 0x5c, 0x8f, 0xf4, 0x11, 0xa7, 0x2e, 0x6b, 0xb8, 0x62, 0x2f, 0x52, 0xe9, 0x9d, 0x91, 0x3d,
	0x44, 0x0b, 0xa9, 0xf4, 0xf8, 0x6d, 0x34, 0xf1, 0xb1, 0xbf, 0x33, 0xbd, 0xc4, 0xd1, 0x78, 0x59,
	0x70, 0x65, 0x8c, 0x65, 0xa6, 0x17, 0xb5, 0xd1, 0xe8, 0xdb, 0xef, 0x36, 0xf0, 0x64, 0x9a, 0x98,
	0xda, 0x22, 0x06, 0x88, 0x66, 0x13, 0x7f, 0xfa, 0x79, 0x5a, 0xb7, 0x92, 0x3a, 0xd2, 0xdb, 0x22,
	0xae, 0x06, 0xda, 0x22, 0x0f, 0x88, 0x5e, 0xe7, 0x8d, 0x8e, 0xee, 0x86, 0x6c, 0xd7, 0x42, 0x5b,
	0x83, 0x80, 0xdc, 0x20, 0x1e, 0x32, 0xb6, 0xe7, 0xb2, 0xf8, 0x99, 0x6b, 0x6f, 0xb9, 0xf8, 0x6b,
	0xf1, 0x05, 0xed, 0x74, 0xde, 0xa3, 0xe3, 0x1e, 0xb9, 0x2a, 0xfe, 0xaf, 0x3b, 0xdb, 0x10, 0xfb,
	0xc4, 0x9c, 0xf8, 0x11, 0x5a, 0x76, 0xf7, 0x13, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x79, 0x2d, 0x93,
	0x2d, 0x02, 0x00, 0x00,
}
